{"version":3,"sources":["components/SignIn.jsx","components/SignOut.jsx","components/ChatMessage.jsx","components/ChatRoom.jsx","App.js","serviceWorker.js","index.js"],"names":["SignIn","props","useState","email","setEmail","password","setPassword","handleChange","input","currentTarget","id","value","className","type","placeholder","onChange","onClick","event","preventDefault","firebase","auth","EmailAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","provider","GoogleAuthProvider","signInWithPopup","SignOut","user","signOut","ChatMessage","message","text","uid","photoURL","messageClassName","currentUser","src","ChatRoom","messagesRef","firestore","collection","query","orderBy","limit","messageValue","setMessageValue","useCollectionData","idField","messages","scrollFunc","useRef","sendMessage","e","a","add","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","key","ref","onSubmit","target","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","setUser","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.83409d0c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport firebase, { firestore } from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nexport default function SignIn(props) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleChange = ({ currentTarget: input }) => {\n    if (input.id === \"email\") {\n      setEmail(input.value);\n    } else {\n      setPassword(input.value);\n    }\n  };\n\n  const googleSignIn = (event) => {\n    event.preventDefault();\n\n    const provider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(provider);\n  };\n\n  const emailSignIn = (event) => {\n    event.preventDefault();\n    const provider = new firebase.auth.EmailAuthProvider();\n    firebase.auth().signInWithEmailAndPassword(email, password);\n  };\n\n  const emailSignUp = (event) => {\n    event.preventDefault();\n    const provider = new firebase.auth.EmailAuthProvider();\n    firebase.auth().createUserWithEmailAndPassword(email, password);\n  };\n\n  return (\n    <div>\n      <form className=\"sign-form\">\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          id=\"email\"\n          onChange={handleChange}\n          value={email}\n        />\n        <input\n          type=\"password\"\n          placeholder=\"********\"\n          id=\"password\"\n          onChange={handleChange}\n          value={password}\n        />\n        <div className=\"buttons-div\">\n          <button type=\"submit\" onClick={emailSignIn} className=\"sign-button\">\n            Se connecter\n          </button>\n          <span>Ou</span>\n          <button type=\"submit\" onClick={emailSignUp} className=\"sign-button\">\n            Créer un compte\n          </button>\n        </div>\n      </form>\n      <button onClick={googleSignIn} className=\"google-button\">\n        S'inscrire avec <strong>Google</strong>\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport firebase, { firestore } from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nexport default function SignOut(props) {\n  const { user } = props;\n\n  return (\n    user && (\n      <button onClick={() => firebase.auth().signOut()}>Se déconnecter</button>\n    )\n  );\n}\n","import { auth } from \"firebase\";\nimport React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nexport default function ChatMessage(props) {\n  const { text, uid, photoURL, email } = props.message;\n  const messageClassName =\n    uid === firebase.auth().currentUser.uid ? \"sent\" : \"received\";\n  const { user } = props;\n\n  return (\n    <div className={`${messageClassName} message`}>\n      {photoURL ? (\n        <img src={photoURL} />\n      ) : (\n        <span className=\"username\">{email}</span>\n      )}\n      <p>{text}</p>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport ChatMessage from \"./ChatMessage\";\n\nexport default function ChatRoom(props) {\n  const firestore = firebase.firestore();\n\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n  const [messageValue, setMessageValue] = useState(\"\");\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  const { user } = props;\n  const scrollFunc = useRef();\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL, email } = firebase.auth().currentUser;\n\n    await messagesRef.add({\n      text: messageValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      email,\n    });\n\n    setMessageValue(\"\");\n\n    scrollFunc.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div>\n      <div className=\"messages-area\">\n        {messages &&\n          messages.map((message) => (\n            <ChatMessage key={message.id} message={message} user={user} />\n          ))}\n        <div ref={scrollFunc}></div>\n      </div>\n      <form onSubmit={sendMessage}>\n        <input\n          type=\"text\"\n          value={messageValue}\n          onChange={(e) => setMessageValue(e.target.value)}\n        />\n        <button type=\"submit\">Envoyer</button>\n      </form>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport SignIn from \"./components/SignIn\";\nimport SignOut from \"./components/SignOut\";\nimport ChatRoom from \"./components/ChatRoom\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC7b22llokG_iTeCr9ciAHxJLwcqyKTNmU\",\n  authDomain: \"fir-chat-7e40b.firebaseapp.com\",\n  databaseURL: \"https://fir-chat-7e40b.firebaseio.com\",\n  projectId: \"fir-chat-7e40b\",\n  storageBucket: \"fir-chat-7e40b.appspot.com\",\n  messagingSenderId: \"400367366185\",\n  appId: \"1:400367366185:web:e77fcabadaefbb8aaa2c38\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  firebase.auth().onAuthStateChanged((user) => {\n    setUser(user);\n  });\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SignOut user={user} />\n      </header>\n      <section>{user ? <ChatRoom user={user} /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}